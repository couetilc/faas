#!/usr/bin/env python3
"""
Docker-based FaaS handler - Receives socket FD via SCM_RIGHTS and responds.

This handler runs inside a Docker container and:
1. Connects to /control.sock (Unix domain socket)
2. Receives TCP socket FD via SCM_RIGHTS
3. Sends a simple HTML hello world response
4. Exits
"""

import socket
import array
import sys
import os


def receive_socket_fd():
    """Connect to control socket and receive TCP socket FD via SCM_RIGHTS."""
    try:
        # Connect to Unix domain socket (mounted from host)
        control_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        control_sock.connect('/control.sock')
        print(f"[Container {os.getpid()}] Connected to control socket", file=sys.stderr)
    except (FileNotFoundError, ConnectionRefusedError) as e:
        print(f"[Container {os.getpid()}] Error: Could not connect to /control.sock: {e}",
              file=sys.stderr)
        sys.exit(1)

    # Receive FD via SCM_RIGHTS
    fds = array.array('i')
    msg, ancdata, flags, addr = control_sock.recvmsg(
        1024,  # Buffer size for regular data
        socket.CMSG_SPACE(array.array('i', [0]).itemsize)
    )

    # Extract FD from ancillary data
    for cmsg_level, cmsg_type, cmsg_data in ancdata:
        if (cmsg_level == socket.SOL_SOCKET and
            cmsg_type == socket.SCM_RIGHTS):
            fds.frombytes(cmsg_data)
            break

    control_sock.close()

    if len(fds) == 0:
        print(f"[Container {os.getpid()}] Error: No file descriptor received",
              file=sys.stderr)
        sys.exit(1)

    received_fd = fds[0]
    print(f"[Container {os.getpid()}] Received FD: {received_fd}", file=sys.stderr)
    return received_fd


def main():
    print(f"[Container {os.getpid()}] Docker handler starting", file=sys.stderr)

    # Receive TCP socket FD from server
    tcp_fd = receive_socket_fd()

    # Reconstruct TCP socket from FD
    client_sock = socket.fromfd(tcp_fd, socket.AF_INET, socket.SOCK_STREAM)

    # Get client address for logging
    try:
        client_addr = client_sock.getpeername()
        print(f"[Container {os.getpid()}] Handling request from {client_addr}",
              file=sys.stderr)
    except OSError:
        client_addr = ('unknown', 0)

    # Build simple HTML response
    html = """<!DOCTYPE html>
<html>
<head>
    <title>FaaS Docker Handler</title>
</head>
<body>
    <h1>Hello from Docker!</h1>
    <p>This response was generated by a Docker container.</p>
    <p>Container PID: {}</p>
    <p>Client: {}</p>
</body>
</html>
""".format(os.getpid(), client_addr)

    response_body = html.encode('utf-8')

    # Send HTTP response
    response = b"HTTP/1.1 200 OK\r\n"
    response += b"Content-Type: text/html\r\n"
    response += f"Content-Length: {len(response_body)}\r\n".encode()
    response += b"\r\n"
    response += response_body

    client_sock.sendall(response)
    print(f"[Container {os.getpid()}] Response sent successfully", file=sys.stderr)

    # Clean up
    client_sock.close()
    print(f"[Container {os.getpid()}] Handler complete", file=sys.stderr)


if __name__ == '__main__':
    main()
