#!/usr/bin/env python3
"""
FaaS handler - Child process that handles HTTP requests.

Receives a socket file descriptor from the parent process, reconstructs
the socket, and handles HTTP requests using BaseHTTPRequestHandler.
"""

import socket
import argparse
import os
from http.server import BaseHTTPRequestHandler
from http import HTTPStatus


class FaaSRequestHandler(BaseHTTPRequestHandler):
    """HTTP request handler for FaaS child processes."""

    def do_GET(self):
        """Handle GET requests."""
        # Build response body
        body = f"""FaaS Handler Response

Process ID: {os.getpid()}
Method: GET
Path: {self.path}
Headers: {dict(self.headers)}

This response was generated by a child process!
""".encode()

        # Send HTTP response
        self.send_response(HTTPStatus.OK)
        self.send_header('Content-Type', 'text/plain')
        self.send_header('Content-Length', len(body))
        self.end_headers()
        self.wfile.write(body)

    def do_POST(self):
        """Handle POST requests."""
        # Read request body
        content_length = int(self.headers.get('Content-Length', 0))
        request_body = self.rfile.read(content_length) if content_length > 0 else b''

        # Build response body
        body = f"""FaaS Handler Response

Process ID: {os.getpid()}
Method: POST
Path: {self.path}
Request Body Length: {len(request_body)} bytes
Request Body: {request_body.decode('utf-8', errors='replace')}

This response was generated by a child process!
""".encode()

        # Send HTTP response
        self.send_response(HTTPStatus.OK)
        self.send_header('Content-Type', 'text/plain')
        self.send_header('Content-Length', len(body))
        self.end_headers()
        self.wfile.write(body)

    def log_message(self, format, *args):
        """Override to customize logging."""
        print(f"[Child {os.getpid()}] {self.address_string()} - {format % args}")


def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='FaaS HTTP request handler')
    parser.add_argument('--fd', type=int, required=True,
                        help='File descriptor of client socket')
    args = parser.parse_args()

    print(f"[Child {os.getpid()}] Starting with FD {args.fd}")

    try:
        # Reconstruct socket from file descriptor
        client_sock = socket.fromfd(args.fd, socket.AF_INET, socket.SOCK_STREAM)

        # Get client address for logging
        try:
            client_addr = client_sock.getpeername()
        except OSError:
            client_addr = ('unknown', 0)

        # Handle the HTTP request
        # BaseHTTPRequestHandler.__init__() handles the entire request/response cycle
        FaaSRequestHandler(client_sock, client_addr, None)

        print(f"[Child {os.getpid()}] Request handled successfully")

    except Exception as e:
        print(f"[Child {os.getpid()}] Error handling request: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Ensure socket is closed (though BaseHTTPRequestHandler should handle this)
        try:
            client_sock.close()
        except:
            pass


if __name__ == '__main__':
    main()
